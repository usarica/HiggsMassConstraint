HiggsMassConstraint package:
Authors: T. Cheng, H. Mei, U. Sarica, D. Sperka

==============================================================================================
To initialize the fitter, do (e.g. ZZ->4l)

hmassconstraint = new HiggsMassConstraint(13., RooSpin::kVdecayType_Zll, RooSpin::kVdecayType_Zll)
==============================================================================================
Fit momentum strategy to use pTs, eta or phis can be set via (temporary instruction: don't set it to something else)

setFitMomentumStrategy(HiggsMassConstraint::FitMomentumStrategy fitMomStrategy_)

and the fit VV strategy to use V1, V2 daughters via

setFitVVStrategy(HiggsMassConstraint::FitVVStrategy fitVVStrategy_)

The available strategies are in HiggsMassConstraint.h
==============================================================================================
The functions

setJECUserFloatString(TString jecString_)
setMuonKalmanCorrectedPtErrorString(TString kalmanMuPtString_)

set te strings to use in order to get userFloats. The former is for obtaining the JEC uncertainties in jets and the latter for obtaining the corrected pT uncertaintiy in muons after Kalman fit is applied (+ smearing in MC).
These string are set to jec_unc and correctedPtError by default, but depending on te framework, they might need to be reset as well.

The function

setFastPDF(bool flag)

sets te use of fast pdf. For now, set it explicitly to true. The fast PDF refers to spline while the non-fast version refers to the full MELA pdf.

==============================================================================================
Example usage:

In constructor of the candidate analyzer, add:
...
  HiggsMassConstraint* hmcfitter;
...
  hmcfitter = new HiggsMassConstraint(SetupToSqrts(setup), RooSpin::kVdecayType_Zll, RooSpin::kVdecayType_Zll);
  hmcfitter->setJECUserFloatString("jec_unc");
  hmcfitter->setMuonKalmanCorrectedPtErrorString("correctedPtError");
  hmcfitter->setFastPDF(true);
...

In the analyze function, add something like:
...
      std::vector<pair<const reco::Candidate*, const pat::PFParticle*>> FermionWithFSR;
      for (unsigned ilep=0; ilep<4; ilep++){
        if (FSRMap.find(ZZLeps[ilep])!=FSRMap.end()) FermionWithFSR.push_back(
          pair<const reco::Candidate*, const pat::PFParticle*>((ZZLeps[ilep]->masterClone().get()), &(*(FSRMap[ZZLeps[ilep]])))
          );
        else FermionWithFSR.push_back(
          pair<const reco::Candidate*, const pat::PFParticle*>((ZZLeps[ilep]->masterClone().get()), 0)
          );
      }
      hmcfitter->fitTo(FermionWithFSR);
      Z1MassHMCRefit=hmcfitter->getRefittedMass(0);
      Z2MassHMCRefit=hmcfitter->getRefittedMass(1);
      ZZMassHMCRefit=hmcfitter->getRefittedMass(2);
      Z1MassHMCRefitErr=hmcfitter->getRefittedMassError(0);
      Z2MassHMCRefitErr=hmcfitter->getRefittedMassError(1);
      ZZMassHMCRefitErr=hmcfitter->getRefittedMassError(2);
...
      myCand.addUserFloat("ZZMassHMCRefit", ZZMassHMCRefit);
      myCand.addUserFloat("ZZMassHMCRefitErr", ZZMassHMCRefitErr);
      myCand.addUserFloat("Z1MassHMCRefit", Z1MassHMCRefit);
      myCand.addUserFloat("Z1MassHMCRefitErr", Z1MassHMCRefitErr);
      myCand.addUserFloat("Z2MassHMCRefit", Z2MassHMCRefit);
      myCand.addUserFloat("Z2MassHMCRefitErr", Z2MassHMCRefitErr);
...



